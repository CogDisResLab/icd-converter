name: Continuous integration

on:
  schedule:
    - cron:  '30 5,17 * * *'
  push:
    branches:
      - '*'
      - '!main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:


concurrency:
  group: CI

env:
  GIST_KEY: 6e694db1d6b96980c71ea0f13611d6c4 # pragma: allowlist secret
  RUST_BACKTRACE: 1
  MINIMUM_WAIT: 3
  MAXIMUM_WAIT: 10

jobs:
  windows-ci:
    runs-on: ${{ matrix.os }}-latest
    outputs:
      result: ${{steps.result.outputs.result}}
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - {{ msrv }}  # MSRV
        os:
          - windows
        include:
          - os: windows
            logo: windows
          - rust: {{ msrv }}
            label: msrv
          - rust: nightly
            label: nightly
          - rust: beta
            label: beta
          - rust: stable
            label: stable

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - uses: actions-rs/cargo@v1
        name: Build
        with:
          command: build

      - uses: actions-rs/cargo@v1
        name: Test
        with:
          command: test

      - uses: actions-rs/cargo@v1
        name: Format
        with:
          command: fmt
          args: --all -- --check

      - uses: actions-rs/cargo@v1
        name: Lint
        with:
          command: clippy
          args: -- -D warnings

      - name: Wait before badge creation
        uses: AliSajid/random-wait-action@v1.1.0
        with:
          minimum: ${{ env.MINIMUM_WAIT }}
          maximum: ${{ env.MAXIMUM_WAIT }}

      - name: Create Awesome Badge - Success
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: success()
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_KEY }}
          filename: ${{matrix.os}}-${{matrix.label}}.json
          label: Build
          namedLogo: ${{matrix.logo}}
          message: Succeeded
          color: green

      - name: Create Awesome Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: failure()
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_KEY }}
          filename: ${{matrix.os}}-${{matrix.label}}.json
          namedLogo: ${{matrix.logo}}
          label: Build
          message: Failed
          isError: true

      - name: Set Result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT

  ubuntu-ci:
    runs-on: ${{ matrix.os }}-latest
    outputs:
      result: ${{steps.result.outputs.result}}
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - {{ msrv }}  # MSRV
        os:
          - ubuntu
        include:
          - os: ubuntu
            logo: ubuntu
          - rust: {{ msrv }}
            label: msrv
          - rust: nightly
            label: nightly
          - rust: beta
            label: beta
          - rust: stable
            label: stable

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        name: Install Rust
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - uses: actions-rs/cargo@v1
        name: Build
        with:
          command: build

      - uses: actions-rs/cargo@v1
        name: Test
        with:
          command: test

      - uses: actions-rs/cargo@v1
        name: Format
        with:
          command: fmt
          args: --all -- --check

      - uses: actions-rs/cargo@v1
        name: Lint
        with:
          command: clippy
          args: -- -D warnings

      - name: Wait before badge creation
        uses: AliSajid/random-wait-action@v1.1.0
        with:
          minimum: ${{ env.MINIMUM_WAIT }}
          maximum: ${{ env.MAXIMUM_WAIT }}

      - name: Create Awesome Badge - Success
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: success()
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_KEY }}
          filename: ${{matrix.os}}-${{matrix.label}}.json
          label: Build
          namedLogo: ${{matrix.logo}}
          message: Succeeded
          color: green

      - name: Create Awesome Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: failure()
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_KEY }}
          filename: ${{matrix.os}}-${{matrix.label}}.json
          namedLogo: ${{matrix.logo}}
          label: Build
          message: Failed
          isError: true

      - name: Set Result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT

  macos-ci:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - {{ msrv }}  # MSRV
        os:
          - macos
        include:
          - os: macos
            logo: apple
          - rust: {{ msrv }}
            label: msrv
          - rust: nightly
            label: nightly
          - rust: beta
            label: beta
          - rust: stable
            label: stable

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        name: Install Rust
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - uses: actions-rs/cargo@v1
        name: Build
        with:
          command: build

      - uses: actions-rs/cargo@v1
        name: Test
        with:
          command: test

      - uses: actions-rs/cargo@v1
        name: Format
        with:
          command: fmt
          args: --all -- --check

      - uses: actions-rs/cargo@v1
        name: Lint
        with:
          command: clippy
          args: -- -D warnings

      - name: Wait before badge creation
        uses: AliSajid/random-wait-action@v1.1.0
        with:
          minimum: ${{ env.MINIMUM_WAIT }}
          maximum: ${{ env.MAXIMUM_WAIT }}

      - name: Create Awesome Badge - Success
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: success()
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_KEY }}
          filename: ${{matrix.os}}-${{matrix.label}}.json
          label: Build
          namedLogo: ${{matrix.logo}}
          message: Succeeded
          color: green

      - name: Create Awesome Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: failure()
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_KEY }}
          filename: ${{matrix.os}}-${{matrix.label}}.json
          namedLogo: ${{matrix.logo}}
          label: Build
          message: Failed
          isError: true

      - name: Set Result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT

  semantic-release:
    needs: [macos-ci, windows-ci, ubuntu-ci]
    uses: ./.github/workflows/release.yaml
    secrets: inherit # pragma: allowlist secret

  upload-release-artifacts:
    needs: [semantic-release]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    uses: ./.github/workflows/release_upload.yaml
    secrets: inherit # pragma: allowlist secret
    with:
      new_version: ${{ needs.semantic-release.outputs.new_version }}
      new_release_published: ${{ needs.semantic-release.outputs.new_release_published }}
